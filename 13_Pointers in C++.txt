# Pointers: 


* A pointer is simply just a data type which holds the address of other data types. 

* Now there's no further theory at all in pointers to understand, so let's directly jump to the code and understand the working of pointers:

_ _ _ _ _ _ _ _ _ _ _ _ _ 


# Code of Pointers: 


#include<iostream>
using namespace std;

int main(){

    // What is a pointer? ----> Data type which holds the address of other data types
    int a=3;
    int* b;
    b = &a;

    // & ---> (Address of) Operator
    cout<<"@ The address of a is: "<<&a<<endl;
    cout<<"@ The address stored in pointer b is the address of a: "<<b<<endl;

    cout<<endl;

    // * ---> (value at) Dereference operator
    cout<<"# The value at the address which is stored in pointer b is: "<<*b<<endl;

    cout<<endl;

    // Pointer to pointer
    int** c = &b; 
    cout<<"@ The address of b is: "<<&b<<endl; 
    cout<<"@ The address stored in \"pointer to pointer\" c is the address of pointer b: "<<c<<endl; 

    cout<<endl;

    cout<<"# The value at the address which is stored in pointer to pointer c is: "<<*c<<endl; 
    cout<<"# Dereferencing \"pointer to pointer\" value_at(value_at(c)) is: "<<**c<<endl; 

    // & This cycle of pointers can keep on going as much as the coder wants 

    // A pointer is a chunk of memory whose contents are an address. 
    // & A pointer to a pointer is also a variable which contains an address of another pointer.  

    // So, there is no limit on chain of poniters which are holding the address of another pointer.
    // int************************************************************************** z;
    // is also allowed in C++ 

    return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _



@ So, whichever datatype's address will be stored in a pointer, in other words it means that the pointer will be pointing towards that variable or object or whatever it is whose address is stored in that pointer. 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _




