# Friend Classes: 


* When any function of class A wants to access private members of class B then you can make that particular function of class A as friend function of Class B. 

* But if a lot of functions of class A want to access private members of class B then obviously you can make all those functions of class A one by one friend of class B but that's a little hectic. 

* So, in this scenario you can make the whole class A as friend of class B and this concept of making whole classes as friend of other classes is known as "Friend Classes". 

_ _ _ _ _ _ _ _ _ _ _ _ _ _


# Example Code for Friend Classes: 


#include<iostream>
using namespace std;


// Forward declaration of Complex class is done here, to prevent error in calculator class's statements where we're using complex class for arguments in functions. 

class Complex;


class Calculator{

    public:
        int add(int a, int b){
            return (a + b);
        }

        int sumRealComplex(Complex, Complex);
        int sumCompComplex(Complex, Complex);
};


class Complex
{
    int a, b;
    // Individually declaring each function of calculator class as friend which needs access to complex class's private members: 
    // friend int Calculator ::sumRealComplex(Complex, Complex);
    // friend int Calculator ::sumCompComplex(Complex, Complex);

    // Aliter: Declaring the entire calculator class as friend 
    friend class Calculator;

    public:
        void setNumber(int n1, int n2){
            a = n1;
            b = n2;
        }

        void printNumber(){
            cout << "* Your number is " << a << " + " << b << "i" << endl;
        }
};

int Calculator ::sumRealComplex(Complex o1, Complex o2){
    return (o1.a + o2.a);
}

int Calculator ::sumCompComplex(Complex o1, Complex o2){
    return (o1.b + o2.b);
}


int main(){

    Complex o1, o2; 
    o1.setNumber(1, 4); 
    o2.setNumber(5, 7); 

    Calculator calc; 

    int res = calc.sumRealComplex(o1, o2); 
    cout << "* The sum of real part of o1 and o2 is " << res << "." << endl; 

    int resc = calc.sumCompComplex(o1, o2); 
    cout << "* The sum of complex part of o1 and o2 is " << resc << "." << endl; 

    return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _




