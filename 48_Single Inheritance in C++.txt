# Single Inheritance in C++: 

_ _ _ _ _ _ _ _ _ _ _ _ _


# Example Code for Single Inheritance Using "public" Visibility Mode:  


#include<iostream>
using namespace std;


class Base{                                // This is the Base class

    private:
        int data1;                         // Private members are not inheritable 

    public:
        int data2;
        void setData(int u, int i);
        int getData1();
        int getData2();
};


class Derived : public Base{               // Class is being derived publically 

    private:
        int data3;
        
    public:
        void process();
        void display();
};


void Base :: setData(int u, int i){
    data1 = u;
    data2 = i;
}

int Base :: getData1(){
    return data1;
}

int Base :: getData2(){
    return data2;
}


void Derived :: process(){
    data3 = getData1() * data2; 
}

void Derived :: display(){
    cout << "* The value of Data1 is: " << getData1() << endl; 
    cout << "* The value of Data2 is: " << data2 << endl; 
    cout << "* The value of Data3 is: " << data3 << endl; 
}


int main(){

    Derived v;

    v.setData(100, 547);
    v.process();
    v.display();

    return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 



# Example Code for Single Inheritance Using "private" Visibility Mode:  


#include<iostream>
using namespace std;


class Base{                                // This is the Base class

    private:
        int data1;                         // Private members are not inheritable 

    public:
        int data2;
        void setData(int u, int i);
        int getData1();
        int getData2();
};


class Derived : private Base{              // Class is being derived privately 

    private:
        int data3;
        
    public:
        void process();
        void display();
};


void Base :: setData(int u, int i){
    data1 = u;
    data2 = i;
}

int Base :: getData1(){
    return data1;
}

int Base :: getData2(){
    return data2;
}


void Derived :: process(){
    setData(100, 547);
    data3 = getData1() * data2; 
}

void Derived :: display(){
    cout << "* The value of Data1 is: " << getData1() << endl; 
    cout << "* The value of Data2 is: " << data2 << endl; 
    cout << "* The value of Data3 is: " << data3 << endl; 
}


int main(){

    Derived v;

    v.process();
    v.display();

    return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 




