# Multiple Inheritance in C++: 


* When one derived class is inherited from more than one base class then it's called Mutilevel Inheritance. 


# Understand this concept with this example and try to visualize it: 

* Example: We have 5 classes “Student”, “Brother”, “Son”, "Friend" and "Aryan". If "Student", "Brother", "Son" & "Friend", all these 4 classes are inherited by one class "Aryan", then it means that "Aryan" class is derived from all the other 4 classes and now it has all the inheritable features and functionalities of those 4 classes, this is called mutiple inheritance. 

_ _ _ _ _ _ _ _ _ _ _ _ _


# Syntax of Multiple Inheritance in C++: 


/*
    class DerivedC : visibility-mode Base1, visibility-mode Base2{
        Class body of class "DerivedC"
    };
*/


* Here DerivedC class is being inherited from two Base Classes: Base1 & Base2 and you can specify "Visibility Mode" of each Base Class individually with them.

* And whenever we do "Multiple Inheritance", as we have seen in above syntax, we just write all the base classes after the colon ":", with their individual "Visibility Mode" if we want to specify it, and we write all these base classes separated with a comma ",". 

* We know that if we don't specify any visibility mode for any class while performing inheritance then the default "Visibility Mode" for it is "private". 

_ _ _ _ _ _ _ _ _ _ _ _ _
 

# Example Code for Multiple Inheritance: 


#include<iostream>
using namespace std;


class Base1{
    protected:
        int base1int;

    public:
        void set_base1int(int a){
            base1int = a;
        }
};


class Base2{
    protected:
        int base2int;

    public:
        void set_base2int(int a){
            base2int = a;
        }
};


class Base3{
    protected:
        int base3int;

    public:
        void set_base3int(int a){
            base3int = a;
        }
};


class Derived : public Base1, public Base2, public Base3{
    public: 
        void show(){
            cout << "* The value of Base1 is: " << base1int << endl;
            cout << "* The value of Base2 is: " << base2int << endl;
            cout << "* The value of Base3 is: " << base3int << endl;
            cout << "* The sum of these values is: " << base1int + base2int + base3int << endl;
        }
};


int main(){
    
    Derived x;
    x.set_base1int(25);
    x.set_base2int(5);
    x.set_base3int(15);
    x.show();
    
    return 0;
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 



# I You're a Beginner, Understand These Things: 


---> Most of the people I guess won't be having any problem in understanding the logics of all these concepts if they're studying properly. I think I have made these notes in a well structured way and the concepts are taught in a really good manner in these notes. 

---> But some people might be thinking that in the last topic in "Multilevel Inheritance" there we wrote an example code of printing percentage of 2 subjects' marks using 68 lines of code. Which we could have calculated in just 9-10 lines of code and we could have also taken input from user for marks in these 9-10 lines of code to calculate the percentage. 

---> And here in "Multiple Inheritance" we are assigning values to 3 variables and we're printing sum of those 3 variables using 58 lines of code. Which we can just directly take input from user and calculate the sum of these 3 variables and print the sum in just 7-8 lines of code. 

---> Why are we writing so big codes then to perform so simple operations??? 


* See, the answer is really simple, here we're grasping the concepts, we're trying to get familiar with Object Oriented Programming and we're trying to understand "Syntax and Working of Different Types of Inheritance".

* Here we're not developing real life full fledged applications or games, obviously later on you can go on developing them also, but currently you have to understand the basics first and I am just trying to teach you those basics by giving simple examples which are easy to understand.

* If I start giving big examples then they will be really overwhelming for a beginner to understand and it will be really demotivating because I was also a beginner once and I know that it took me time to understand all these concepts when I studied them for the 1st time. 

* Currently as a beginner you should study to strengthen your grip on this language, so that when you work on large projects or on open source community then you are able to understand that what's going on there and you should be able to understand the terminologies which other developers out there will be using and then only you will be able to contribute nicely. 

* We will build few amazing projects after we're done with studying C++ completely, so trust the process, stay consistent, practice a lot and stick with the journey. 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 




